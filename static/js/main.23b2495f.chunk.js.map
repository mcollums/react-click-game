{"version":3,"sources":["components/Container.js","components/Row.js","components/Col.js","components/GameCard/GameCard.js","components/GameCol/GameCol.js","components/Header/Header.js","components/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","react_default","a","createElement","className","concat","fluid","children","Row","Col","size","split","map","join","GameCard","id","name","onClick","handleClick","src","image","alt","style","height","display","flex","flexWrap","justifyContent","alignContent","overflow","GameCol","Header","score","wins","losses","GameContainer","state","pokemon","clicked","message","handleShuffle","shuffledPokemon","array","i","length","j","Math","floor","random","_ref","shuffle","_this","setState","console","log","indexOf","this","handleIncrement","currentLosses","handleReset","currentWins","currentScore","_this2","components_Header_Header","components_Container","components_Row","components_Col","components_GameCol_GameCol","components_GameCard_GameCard","key","Component","App","components_GameContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kvCAMeA,MAJf,SAAmBC,GACjB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAC,OAAcL,EAAMM,MAAQ,SAAW,KAAON,EAAMO,WCG5DC,MAJf,SAAaR,GACX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,MAAAC,OAAQL,EAAMM,MAAQ,SAAW,KAAON,EAAMO,WCatDE,MAVf,SAAaT,GACX,IAAMU,EAAOV,EAAMU,KAAKC,MAAM,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,KAEnE,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWM,GACbV,EAAMO,WCFEO,SANE,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKY,GAAIf,EAAMgB,KAAMC,QAAS,kBAAMjB,EAAMkB,YAAYlB,EAAMe,KAAKX,UAAU,aACvEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAee,IAAKnB,EAAMoB,MAAOC,IAAKrB,EAAMgB,UCF7DM,SAAQ,CAEVC,OAAQ,OACRC,QAAS,OACTC,KAAM,EACNC,SAAU,OAGVC,eAAgB,eAChBC,aAAc,aACdC,SAAU,SAaCC,MAVf,SAAiB9B,GACb,IAAMU,EAAOV,EAAMU,KAAKC,MAAM,KAAKC,IAAI,SAAAF,GAAI,MAAI,OAASA,IAAMG,KAAK,KAEnE,OACEZ,EAAAC,EAAAC,cAAA,OAAKmB,MAAOA,EAAOlB,UAAWM,GAC3BV,EAAMO,WCiBAwB,SAhBA,SAAA/B,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,iCAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,MAAIY,GAAG,SAAP,kBACgBf,EAAMgC,MADtB,SAEQhC,EAAMiC,KAFd,WAGUjC,EAAMkC,OAHhB,qBC+FDC,6MA1GXC,MAAQ,CACJC,UACAL,MAAO,EACPC,KAAM,EACNC,OAAQ,EACRI,QAAS,GACTC,QAAS,MAabC,cAAgB,WACZ,IAAIC,EA7BZ,SAAiBC,GACb,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADDM,EAEhB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFgCM,EAAA,GAE5BP,EAAMG,GAFsBI,EAAA,GAI3C,OAAOP,EAwBmBQ,CAAQb,GAC9Bc,EAAKC,SAAS,CAAEf,QAASI,OAG7BvB,YAAc,SAAAH,GAEV,GADAsC,QAAQC,IAAIvC,IAC4B,IAApCoC,EAAKf,MAAME,QAAQiB,QAAQxC,GAC3BoC,EAAKC,SAAS,CAAEd,QAASa,EAAKf,MAAME,QAAQjC,OAAOU,IAAO,WACtDsC,QAAQC,IAAI,kBAAoBE,KAAKpB,MAAME,SAC3CkB,KAAKC,wBAEN,CACHJ,QAAQC,IAAI,wBAA0BH,EAAKf,MAAME,SACjD,IAAIoB,EAAgBP,EAAKf,MAAMF,OAC/BiB,EAAKC,SAAS,CAAElB,OAAQwB,EAAgB,IACxCL,QAAQC,IAAI,UAAYH,EAAKf,MAAMF,QACnCiB,EAAKQ,kBAIbF,gBAAkB,WACd,GAAIN,EAAKf,MAAME,QAAQM,SAAWP,EAAQO,OAAQ,CAC9CS,QAAQC,IAAI,YACZ,IAAIM,EAAcT,EAAKf,MAAMH,KAC7BkB,EAAKC,SAAS,CACVnB,KAAM2B,EAAc,EACpBrB,QAAS,aAEbY,EAAKQ,kBACF,CACH,IAAIE,EAAeV,EAAKf,MAAMJ,MAC9BmB,EAAKC,SAAS,CACVpB,MAAO6B,EAAe,EACtBtB,QAAS,iBACV,WACCc,QAAQC,IAAI,UAAYE,KAAKpB,MAAMJ,SAG3CmB,EAAKX,mBAGTmB,YAAc,WACVR,EAAKC,SAAS,CACVpB,MAAO,EACPO,QAAS,yBACTD,QAAS,KAEba,EAAKX,yFAIA,IAAAsB,EAAAN,KACL,OACIvD,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4D,EAAD,CACI/B,MAAOwB,KAAKpB,MAAMJ,MAClBC,KAAMuB,KAAKpB,MAAMH,KACjBC,OAAQsB,KAAKpB,MAAMF,OACnBK,QAASiB,KAAKpB,MAAMG,UAExBtC,EAAAC,EAAAC,cAAC6D,EAAD,CAAW1D,MAAM,UACbL,EAAAC,EAAAC,cAAC8D,EAAD,KACIhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAKxD,KAAK,KAAKK,GAAG,YACdd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gDACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,IAA8BoD,KAAKpB,MAAMG,QAAzC,OAGRtC,EAAAC,EAAAC,cAAC8D,EAAD,KACIhE,EAAAC,EAAAC,cAACgE,EAAD,CAASzD,KAAK,MACT8C,KAAKpB,MAAMC,QAAQzB,IAAI,SAAAyB,GAAO,OAC3BpC,EAAAC,EAAAC,cAACiE,EAAD,CACIC,IAAKhC,EAAQtB,GACbA,GAAIsB,EAAQtB,GACZC,KAAMqB,EAAQrB,KACdI,MAAOiB,EAAQjB,MACfF,YAAa4C,EAAK5C,2BAhG1BoD,aCPbC,MAJf,WACE,OAAOtE,EAAAC,EAAAC,cAACqE,EAAD,aCKWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23b2495f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>{props.children}</div>;\n}\n\nexport default Row;\n","import React from \"react\";\n\n// This Col component offers us the convenience of being able to set a column's \"size\" prop instead of its className\n// We can also omit the col- at the start of each Bootstrap column class, e.g. size=\"md-12\" instead of className=\"col-md-12\"\n\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Col;\n","import React from \"react\";\nimport \"./GameCard.css\";\n\nconst GameCard = props => (\n    <div id={props.name} onClick={() => props.handleClick(props.id)} className=\"card grow\" >\n        <img className=\"card-img-top\" src={props.image} alt={props.name} />\n    </div>\n);\n\nexport default GameCard;","import React from \"react\";\nimport \"./GameCol.css\";\n\nconst style = {\n    // paddingTop: \"20px\",\n    height: \"100%\",\n    display: \"flex\",\n    flex: 1,\n    flexWrap: \"wrap\",\n    // flexDirection: \"row\",\n    // padding: \"20px\",\n    justifyContent: \"space-around\",\n    alignContent: \"flex-start\",\n    overflow: \"auto\"\n}\n\nfunction GameCol(props) {\n    const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  \n    return (\n      <div style={style} className={size}>\n        {props.children}\n      </div>\n    );\n  }\n\nexport default GameCol;","import React from \"react\";\nimport \"./Header.css\";\n\nconst style = {\n    headerContainer: {\n        maxWidth: \"1521px\",\n        boxSizing: \"border-box\"\n    },\n    headerRow: {\n        // paddingTop: \"20px\",\n        // height: \"100%\",\n        display: \"flex\",\n        flex: 1,\n        flexWrap: \"wrap\",\n        flexDirection: \"row\",\n        // padding: \"20px\",\n        // justifyContent: \"space-around\",\n        // alignContent: \"flex-start\",\n        // overflow: \"auto\"\n    }\n}\n\nconst Header = props => (\n    <nav className=\"navbar navbar-light bg-light h-auto\">\n        <div className=\"row w-100\">\n            <div className=\"col-4\">\n                <h1 className=\"navbar-brand\">Clicky Game: Pokemon Edition</h1>\n            </div>\n            <div className=\"col-6 float-right\">\n                <h4 id=\"score\"> \n                Current Score: {props.score}    \n                 Wins: {props.wins}\n                 Losses: {props.losses} </h4>  \n            </div>\n        </div>\n    </nav>\n);\n\nexport default Header;","import React, { Component } from \"react\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Col from \"./Col\";\nimport GameCard from \"./GameCard\";\nimport GameCol from \"./GameCol\";\nimport Header from \"./Header\";\nimport pokemon from \"../pokemon.json\"\n\nfunction shuffle(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n}\n\nclass GameContainer extends Component {\n    state = {\n        pokemon,\n        score: 0,\n        wins: 0,\n        losses: 0,\n        clicked: [],\n        message: \"\"\n    };\n\n    //method that shuffles tiles\n    //method that handles click\n    //if pokemon is not in the clicked array...\n    //add it to the click array\n    //increase score by one\n    //if pokemon is in the clicked array...\n    //increase losses by one\n    //score resets\n    //\n\n    handleShuffle = () => {\n        let shuffledPokemon = shuffle(pokemon);\n        this.setState({ pokemon: shuffledPokemon });\n    };\n\n    handleClick = id => {\n        console.log(id);\n        if (this.state.clicked.indexOf(id) === -1) {\n            this.setState({ clicked: this.state.clicked.concat(id) }, function () {\n                console.log(\"Added to array \" + this.state.clicked);\n                this.handleIncrement();\n            });\n        } else {\n            console.log(\"Already in the array \" + this.state.clicked);\n            let currentLosses = this.state.losses;\n            this.setState({ losses: currentLosses + 1 })\n            console.log(\"Score: \" + this.state.losses);\n            this.handleReset();\n        }\n    };\n\n    handleIncrement = () => {\n        if (this.state.clicked.length === pokemon.length) {\n            console.log(\"You win!\");\n            let currentWins = this.state.wins;\n            this.setState({\n                wins: currentWins + 1,\n                message: \"You Win!\"\n            });\n            this.handleReset();\n        } else {\n            let currentScore = this.state.score;\n            this.setState({\n                score: currentScore + 1,\n                message: \"Great Choice!\"\n            }, function () {\n                console.log(\"Score: \" + this.state.score);\n            });\n        }\n        this.handleShuffle();\n    };\n\n    handleReset = () => {\n        this.setState({\n            score: 0,\n            message: \"You Lose. Sad Sad Day.\",\n            clicked: []\n        });\n        this.handleShuffle();\n    };\n\n\n    render() {\n        return (\n            <div>\n                <Header\n                    score={this.state.score}\n                    wins={this.state.wins}\n                    losses={this.state.losses}\n                    message={this.state.message}\n                />\n                <Container fluid=\"-fluid\">\n                    <Row>\n                        <Col size=\"10\" id=\"titleCol\">\n                            <h5 className=\"text-center\">Don't click the same card twice and you win!</h5>\n                            <h5 className=\"text-center\"> {this.state.message} </h5>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <GameCol size=\"10\">\n                            {this.state.pokemon.map(pokemon => (\n                                <GameCard\n                                    key={pokemon.id}\n                                    id={pokemon.id}\n                                    name={pokemon.name}\n                                    image={pokemon.image}\n                                    handleClick={this.handleClick}\n                                />\n                            ))}\n                        </GameCol>\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nexport default GameContainer","import React from 'react';\nimport './App.css';\n\nimport GameContainer from \"./components/GameContainer\";\n\n\nfunction App() {\n  return <GameContainer />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}